<?xml version="1.0" encoding="utf-8"?>
<hookexport>
  <hookdata>
    <config>
      <hook_name>Post Status</hook_name>
      <hook_desc>Publish status update</hook_desc>
      <hook_author>@codebit_org</hook_author>
      <hook_email>juliobarreraa@gmail.com</hook_email>
      <hook_website>http://www.codebit.org</hook_website>
      <hook_update_check/>
      <hook_requirements><![CDATA[a:3:{s:21:"required_applications";a:0:{}s:20:"hook_php_version_min";s:0:"";s:20:"hook_php_version_max";s:0:"";}]]></hook_requirements>
      <hook_version_human>1.10</hook_version_human>
      <hook_version_long>1010</hook_version_long>
      <hook_extra_data><![CDATA[a:4:{s:7:"display";a:3:{s:8:"language";s:65:"From core_public_global: poststatus_attachment, poststatus_submit";s:9:"templates";s:88:"From skin_portal: pluginPostStatus, poststatusShow, showPhoto, showStatus, statusUpdates";s:5:"tasks";s:14:"Tasks: Friends";}s:8:"language";a:1:{s:18:"core_public_global";a:2:{s:0:"";s:21:"poststatus_attachment";i:1;s:17:"poststatus_submit";}}s:9:"templates";a:1:{s:11:"skin_portal";a:5:{i:0;s:16:"pluginPostStatus";i:1;s:14:"poststatusShow";i:2;s:9:"showPhoto";i:3;s:10:"showStatus";i:4;s:13:"statusUpdates";}}s:5:"tasks";a:1:{s:0:"";s:7:"friends";}}]]></hook_extra_data>
      <hook_key>publishstatus</hook_key>
      <hook_global_caches/>
    </config>
  </hookdata>
  <hookfiles>
    <file>
      <hook_file_real>comments.php</hook_file_real>
      <hook_type>libraryHooks</hook_type>
      <hook_classname>comments</hook_classname>
      <hook_data><![CDATA[a:8:{s:12:"dataLocation";s:0:"";s:14:"libApplication";s:4:"core";s:15:"classToOverload";s:26:"classes_comments_bootstrap";s:9:"skinGroup";N;s:12:"skinFunction";N;s:4:"type";N;s:2:"id";N;s:8:"position";N;}]]></hook_data>
      <hooks_source/>
    </file>
    <file>
      <hook_file_real>pubstatus.php</hook_file_real>
      <hook_type>templateHooks</hook_type>
      <hook_classname>pubstatus</hook_classname>
      <hook_data><![CDATA[a:8:{s:12:"dataLocation";s:0:"";s:14:"libApplication";s:0:"";s:15:"classToOverload";s:0:"";s:9:"skinGroup";s:11:"skin_portal";s:12:"skinFunction";s:16:"pluginPostStatus";s:4:"type";s:2:"if";s:2:"id";s:20:"loadPluginPostStatus";s:8:"position";s:12:"post.startif";}]]></hook_data>
      <hooks_source><![CDATA[<?php

/**
 * <pre>
 * Codebit.org
 * IP.Board v3.3.0
 * @description
 * Last Updated: $Date: 10-may-2012 -006  $
 * </pre>
 * @filename            labelfriends.php
 * @author 		$Author: juliobarreraa@gmail.com $
 * @package		PRI
 * @subpackage	        
 * @link		http://www.codebit.org
 * @since		10-may-2012
 * @timestamp           17:56:10
 * @version		$Rev:  $
 *
 */

/**
 * Description of labelfriends
 *
 * @author juliobarreraa@gmail.com
 */
class pubstatus {
    //Protected
    protected $registry;
    protected $DB;
    
    //Public
    public $lang;
    
    public function __construct() {
        $this->registry     = ipsRegistry::instance();
        $this->lang         = $this->registry->getClass('class_localization');
        $this->memberData	=& $this->registry->member()->fetchMemberData();
        $this->DB           = ipsRegistry::DB();
    }
    
    public function getOutput() {
        $this->lang->loadLanguageFile(array('public_global'), 'core'); //Load language
            	
    	$this->registry->class_localization->loadLanguageFile( array( 'public_profile' ), 'members' );
    	
		/* Load status class */
		if ( ! $this->registry->isClassLoaded( 'formatter' ) )
		{
			$classToLoad = IPSLib::loadLibrary( IPSLib::getAppDir( 'portal' ) . '/sources/classes/publish/formatter.php', 'formatter' );
			$this->registry->setClass( 'formatter', new $classToLoad( ipsRegistry::instance() ) );
		}
		
		
		
		$publish_rows = array();
		
		if( ( $rows = $this->registry->formatter->get_l_publish() ) )
		{
		      $publish_rows = $this->registry->formatter->setFormatPubs( $rows, array( 'avatars' => true, 'comments' => true ) );
		}
		
		
		foreach( $publish_rows as $prow )
		{
    		$this->output .= $this->registry->getClass('output')->getTemplate( 'portal' )->$prow[ 'template' ]( $prow );
		}
		
        return $this->registry->output->getTemplate('portal')->poststatusShow( $this->output );
    }
}]]></hooks_source>
    </file>
    <file>
      <hook_file_real>portalMemberStatus.php</hook_file_real>
      <hook_type>libraryHooks</hook_type>
      <hook_classname>portalMemberStatus</hook_classname>
      <hook_data><![CDATA[a:8:{s:12:"dataLocation";s:0:"";s:14:"libApplication";s:4:"core";s:15:"classToOverload";s:12:"memberStatus";s:9:"skinGroup";N;s:12:"skinFunction";N;s:4:"type";N;s:2:"id";N;s:8:"position";N;}]]></hook_data>
      <hooks_source><![CDATA[<?php
/**
 * <pre>
 * Codebit.org
 * IP.Board v3.3.3
 * Allow user to change their status
 * Last Updated: $Date: 2012-07-11 15:31:13 -0400 (Wed, 11 July 2012) $
 * </pre>
 *
 * @author 		$Author: juliobarreraa $
 * @copyright	(c) 2012 - 2015 codebit.org
 * @license		http://www.codebit.org#license
 * @package		IP.Board
 * @subpackage	Portal
 * @link		http://www.codebit.org
 * @since		Wednesday 11st July 2012 (15:30)
 * @version		$Revision: 10721 $
 *
 */

if ( ! defined( 'IN_IPB' ) )
{
	print "<h1>Incorrect access</h1>You cannot access this file directly. If you have recently upgraded, make sure you upgraded all the relevant files.";
	exit();
}

IPSLib::loadLibrary( IPS_ROOT_PATH . 'sources/classes/member/status.php', 'memberStatus' );

class portalMemberStatus extends (~extends~)
{
	public $su_Tags;
	private $keys = null;
	private $_friends = array();
	
	const USER_NAME = 'name';
	
	/**
	 * CONSTRUCTOR
	 *
	 * @param	object	Registry
	 * @return	@e void
	 */
	public function __construct( ipsRegistry $registry )
	{
		parent::__construct( $registry );
		
		$this->settings['tc_parse_names_internal'] = 1;
		
        if ( ! $this->registry->isClassLoaded( 'publish' ) ) {
            $classToLoad = IPSLib::loadLibrary( IPSLib::getAppDir( 'portal' ) . '/sources/classes/publish/publish.php', 'publish' );
            $this->registry->setClass( 'publish', new $classToLoad( $this->registry ) );
        }
	}
	
	/**
	 * Auto parse some stuff
	 *
	 * Eventually could abstract it out but for now, this will do. Mkay.
	 */
	protected function _parseContent( $content, $creator='' )
	{
		parent::_parseContent( $content, $creator );
		/* Portal update? */
		if ( $creator == 'portal' )
		{
			if ( $this->settings['tc_parse_names_internal'] )
			{
        	    if(is_array($this->su_Tags)) {
            	    foreach($this->su_Tags as $tag) {
                	    $content = $this->_autoParseNamesInternal( $tag, $content );
            	    }
            	    unset($this->keys, $this->_friends);
				}
			}
		}
		
		/* Auto parse tags */
		if ( $this->settings['su_parse_url'] )
		{
			$content = preg_replace_callback( '#(^|\s|\(|>|\](?<!\[url\]))((?:http|https|news|ftp)://\w+[^\),\s\<\[]+)#is', array( $this, '_autoParseUrls' ), $content );
		}
		
		return $content;
	}
	
	/**
	 * Callback to auto-parse @names
	 * 
	 * @param	array		Matches from the regular expression
	 * @return	string		Converted text
	 */
	protected function _autoParseNamesInternal( $matches, $content )
	{
	    //TODO: AÃ±adir funcionalidad
	    
        //Load functions cache
        if( ! $this->keys ) {
        
            if ( ! $this->registry->isClassLoaded( 'portalCache' ) ) {
                $classToLoad = IPSLib::loadLibrary( IPSLib::getAppDir( 'portal' ) . '/sources/PortalCache.php', 'PortalCache' );
                $this->registry->setClass( 'portalCache', new $classToLoad( $this->registry ) );
            }
            
            $this->_friends = $this->registry->portalCache->getfriends();
            
            $this->keys = $this->registry->portalCache->getValuesByKey( 'id', $this->_friends );
        }
        
        if( ( $position = array_search( ( int ) $matches->{'id'}, $this->keys ) ) !== false )
        {
            //Se encontro entonces matched, se consulta la skin template y se retorna el output
            $_friend = $this->_friends[ $position ]; //Amigo, username, avatar, name
            
            if( array_key_exists( self::USER_NAME, $_friend ) ) { //si existe la clave de nombre entonces reemplazamos 
                $member = IPSMember::load( intval( $_friend[ 'id' ] ) );
                $userHoverCard = $this->registry->getClass('output')->getTemplate( 'global' )->userHoverCard( $member );
                $content = preg_replace("#(^|\s)(".$_friend[ self::USER_NAME ].")#", sprintf('&nbsp;%s&nbsp;', $userHoverCard), $content ); //AquÃ­ colocamos el contenido del output
            }
        }
        
		return $content;
	}
	
    public function create( $author=null, $owner=null )
    {
    	$author = ( $author === null ) ? $this->getAuthor() : $author;
    	$_owner = $this->getStatusOwner();
    	$owner  = ( $owner  === null ) ? ( ! empty( $_owner['member_id'] ) ? $_owner : $author ) : $owner;
    	$data	= array();
    	
    	if ( $this->canCreate( $author, $owner ) )
    	{
    		if ( $this->getContent() )
    		{
    			$content = $this->_cleanContent( $this->getContent() );
    			$hash    = IPSText::contentToMd5( $content );
    			
    			/* Check for this status update already created */
    			$test = $this->fetchByHash( $owner['member_id'], $hash );
    			
    			if ( $test['status_id'] )
    			{
    				/* Already imported this one */
    				return FALSE;
    			}
    			
    			$dataAttach = array();
        		if( is_array( $this->su_attachment ) )
        		{
        			list( $image, $title, $url, $description ) = $this->su_attachment[ 'attachment' ][ 'params' ][ 'metaTagMap' ];
        			$dataAttach = array
        			              (
        			                     'image'         => $image,
        			                     'title'         => $title,
        			                     'url'           => $url,
        			                     'description'   => $description
        			              );
        		}
    			
    			$data = array( 'status_member_id' => $owner['member_id'],
    						   'status_author_id' => $author['member_id'],
							   'status_date'	  => time(),
							   'status_content'   => $this->_parseContent( $content, $this->_internalData['Creator'] ),
							   'status_hash'      => $hash,
							   'status_replies'	  => 0,
    						   'status_author_ip' => $this->member->ip_address,
    						   'status_approved'  => $this->getIsApproved(),
							   'status_imported'  => intval( $this->_internalData['IsImport'] ),
							   'status_creator'   => trim( addslashes( $this->_internalData['Creator'] ) ),
							   'status_last_ids'  => '',
							   'status_cache'     => serialize( $dataAttach ) );

				/* Data Hook Location */
				IPSLib::doDataHooks( $data, 'statusUpdateNew' );
		
    			$this->DB->insert( 'member_status_updates', $data );
    			
    			$status_id = $this->DB->getInsertId();
    			
    			$data['status_id']	= $status_id;
    			 
    			if ( $owner['member_id'] != $author['member_id'] )
    			{
    				$this->_sendCommentNotification( $author, $owner, $data );
    			}
    			else
    			{
	    			$this->_recordAction( 'new', $author, $data );
	    			
	    			$this->rebuildOwnerLatest( $owner );
	    			
	    			/* Fire off external updates */
	    			$eU = $this->getExternalUpdates();
	    			
	    			if ( ! $this->_internalData['IsImport'] AND is_array( $eU ) )
	    			{
	    				$this->_triggerExternalUpdates( $eU, $status_id, $owner, $content );
	    			}
	    			
	    			//-----------------------------------------
	    			// Notify owner's friends as configured
	    			//-----------------------------------------
	    			
	    			$friends	= array();
	    			
	    			if ( $this->settings['friends_enabled'] AND $author['member_id'] == $owner['member_id'] )
	    			{
		    			$this->DB->build( array( 'select' => 'friends_member_id, friends_approved', 'from' => 'profile_friends', 'where' => 'friends_friend_id=' . $owner['member_id'] ) );
		    			$this->DB->execute();
		    			
		    			while( $_friend = $this->DB->fetch() )
		    			{
		    				if ( $_friend['friends_approved'] )
		    				{
		    					$friends[ $_friend['friends_member_id'] ] = $_friend['friends_member_id'];
		    				}
		    			}
					}
					
					if( count($friends) )
					{
						//-----------------------------------------
						// Notifications library
						//-----------------------------------------
						
						$classToLoad	= IPSLib::loadLibrary( IPS_ROOT_PATH . '/sources/classes/member/notifications.php', 'notifications' );
						$notifyLibrary	= new $classToLoad( $this->registry );
						
		    			$friends = IPSMember::load( $friends );
		    			
		    			$statusUrl = $this->registry->output->buildSEOUrl( 'app=members&amp;module=profile&amp;section=status&amp;type=single&amp;status_id=' . $status_id, 'publicNoSession', 'true', 'members_status_single' );
		    			
		    			foreach( $friends as $friend )
		    			{
		    				$ndata = array( 'NAME'		=> $friend['members_display_name'],
				    						'OWNER'		=> $owner['members_display_name'],
											'STATUS'	=> $data['status_content'],
											'URL'		=> $this->registry->output->buildSEOUrl( 'app=core&amp;module=usercp&amp;tab=core&amp;area=notifications', 'publicNoSession' ) );
							
							IPSText::getTextClass('email')->getTemplate( 'new_status', $friend['language'] );
							IPSText::getTextClass('email')->buildMessage( $ndata );
							
							IPSText::getTextClass('email')->subject	= sprintf( 
																				IPSText::getTextClass('email')->subject, 
																				$this->registry->output->buildSEOUrl( 'showuser=' . $owner['member_id'], 'publicNoSession', $owner['members_seo_name'], 'showuser' ),
																				$owner['members_display_name'],
																				$statusUrl
																			);
			
							$notifyLibrary->setMember( $friend );
							$notifyLibrary->setFrom( $author );
							$notifyLibrary->setNotificationKey( 'friend_status_update' );
							$notifyLibrary->setNotificationUrl( $statusUrl );
							$notifyLibrary->setNotificationText( IPSText::getTextClass('email')->message );
							$notifyLibrary->setNotificationTitle( IPSText::getTextClass('email')->subject );
							
							try
							{
								$notifyLibrary->sendNotification();
							}
							catch( Exception $e ){}
						}
					}
	    		}
    		}
    		
            /** 
             * Data contiene los datos que insertaremos en la base de datos de bitÃ¡cora
             * Si status_member_id es identico a status_author_id es una publicaciÃ³n realizada al pÃºblico/amigos en otro caso es realizada a status_member_id desde status_author_id
             * El ID de la tabla de configuraciÃ³n estarÃ¡ dado por la Clave STATUS_UPDATE
            **/
            
            $pformat_data = array
                            (
                                  'configuration_id'       =>    STATUS_UPDATES,
                                  'parent_id'              =>    $data[ 'status_id' ],
                            );
                            
            //Configuramos los datos e insertamos
            $this->registry->publish->setDataPublish( $pformat_data )->do_insert();
    		
    		return $data;
    	}
    	
    	return FALSE;
    }
}]]></hooks_source>
    </file>
    <file>
      <hook_file_real>reputationCache.php</hook_file_real>
      <hook_type>libraryHooks</hook_type>
      <hook_classname>reputationCache</hook_classname>
      <hook_data><![CDATA[a:8:{s:12:"dataLocation";s:0:"";s:14:"libApplication";s:4:"core";s:15:"classToOverload";s:20:"classReputationCache";s:9:"skinGroup";N;s:12:"skinFunction";N;s:4:"type";N;s:2:"id";N;s:8:"position";N;}]]></hook_data>
      <hooks_source><![CDATA[<?php
/**
 * <pre>
 * Invision Power Services
 * IP.Board v3.3.4
 * Facilitates reputation plugins
 * Last Updated: $Date: 2012-06-12 10:14:49 -0400 (Tue, 12 Jun 2012) $
 * </pre>
 *
 * @author		Joshua Williams <josh@invisionpower.com>
 * @package		IP.Board
 * @copyright	(c) 2001 - 2009 Invision Power Services, Inc.
 * @license		http://www.invisionpower.com/company/standards.php#license
 * @link		http://www.invisionpower.com
 * @since		Wednesday 14th May 2008 14:00
 */

IPSLib::loadLibrary( IPS_ROOT_PATH . 'sources/classes/class_reputation_cache.php', 'classReputationCache' );

class reputationCache extends (~extends~)
{

	/**
	 * CONSTRUCTOR
	 *
	 * @access	public
	 * @return	@e void
	 */
    public function __construct()
    {
        parent::__construct();
        
        if ( ! $this->registry->isClassLoaded( 'publish' ) ) {
            $classToLoad = IPSLib::loadLibrary( IPSLib::getAppDir( 'portal' ) . '/sources/classes/publish/publish.php', 'publish' );
            $this->registry->setClass( 'publish', new $classToLoad( $this->registry ) );
        }
    }
    
	/**
	 * Adds a rating to the index and updates caches
	 *
	 * @access	public
	 * @param	string		$type		Type of content, ex; Post
	 * @param	integer		$type_id	ID of the type, ex: pid
	 * @param	integer		$rating		Either 1 or -1
	 * @param	string		$message	Message associated with this rating
	 * @param	integer		$member_id	Id of the owner of the content being rated
	 * @param	string		[$app]		App for this content, by default the current application
	 * @todo 	[Future] Move forum notifications to an onRep memberSync callback
	 * @return	bool
	 */
	public function addRate( $type, $type_id, $rating, $message='', $member_id=0, $app='' )
	{
		$this->registry->getClass('class_localization')->loadLanguageFile( array( 'public_global' ), 'core' );
		
		/* Online? */
		if ( ! $this->rep_system_on )
		{
			$this->error_message = $this->lang->words['reputation_offline'];
			return false;
		}
		
		/* INIT */
		$app       = ( $app ) ? $app : ipsRegistry::$current_application;
		$rating    = intval( $rating );
		
		if ( ! $this->memberData['member_id'] )
		{
			$this->error_message = $this->lang->words['reputation_guest'];
			return false;
		}
		
		if ( $rating != -1 && $rating != 1 )
		{
			$this->error_message = $this->lang->words['reputation_invalid'];
			return false;
		}
		
		/* Check for existing rating */
		$currentRating = $this->getCurrentMemberRating( array( 'app' => $app, 'type' => $type, 'id' => $type_id, 'memberId' => $this->memberData['member_id'] ) );
		
		/* Check the point types */
		if ( $rating == -1 && IPSMember::canRepDown( $currentRating, $this->memberData ) === false )
		{
			$this->error_message = $this->lang->words['reputation_invalid'];
			return false;
		}
		
		if ( $rating == 1 && IPSMember::canRepUp( $currentRating, $this->memberData ) === false )
		{
			$this->error_message = $this->lang->words['reputation_invalid'];
			return false;
		}
		
		/* Day Cutoff */
		$day_cutoff = time() - 86400;

		/* Check Max Positive Votes */
		if( $rating == 1 )
		{
			if ( intval( $this->memberData['g_rep_max_positive'] ) === 0 )
			{
				$this->error_message = $this->lang->words['reputation_quota_pos'];
				return false;				
			}
			
			$total = $this->DB->buildAndFetch( array( 'select' => 'count(*) as votes', 
													  'from'   => 'reputation_index', 
													  'where'  => 'member_id=' . $this->memberData['member_id'] . ' AND rep_rating=1 AND rep_date > ' . $day_cutoff )	);
					
			if ( $total['votes'] >= $this->memberData['g_rep_max_positive'] )
			{
				$this->error_message = $this->lang->words['reputation_quota_pos'];
				return false;				
			}
		}
		
		/* Check Max Negative Votes if not like mode */
		if ( $rating == -1 AND ! $this->isLikeMode() )
		{
			if ( intval( $this->memberData['g_rep_max_negative'] ) === 0 )
			{
				$this->error_message = $this->lang->words['reputation_quota_neg'];
				return false;				
			}
			
			$total = $this->DB->buildAndFetch( array( 'select' => 'count(*) as votes', 
													  'from'   => 'reputation_index', 
													  'where'  => 'member_id=' . $this->memberData['member_id'] . ' AND rep_rating=-1 AND rep_date > ' . $day_cutoff )	);
													
			if( $total['votes'] >= $this->memberData['g_rep_max_negative'] )
			{
				$this->error_message = $this->lang->words['reputation_quota_neg'];
				return false;				
			}
		}		
		
		/* If no member id was passed in, we have to query it using the config file */
		if( ! $member_id )
		{
			/* Reputation Config */
			if( is_file( IPSLib::getAppDir( $app ) . '/extensions/reputation.php' ) )
			{
				$rep_author_config = array();
				require( IPSLib::getAppDir( $app ) . '/extensions/reputation.php' );/*maybeLibHook*/
			}
			else
			{
				$this->error_message = $this->lang->words['reputation_config'];
				return false;
			}
			
			if( ! $rep_author_config[$type]['column'] || ! $rep_author_config[$type]['table'] )
			{
				$this->error_message = $this->lang->words['reputation_config'];
				return false;
			}
			
			$_col	= $rep_author_config[$type]['id_field'] ? $rep_author_config[$type]['id_field'] : $type;
			
			/* Query the content author */
			$content_author = $this->DB->buildAndFetch( array( 'select' => "{$rep_author_config[$type]['column']} as id",
															   'from'   => $rep_author_config[$type]['table'],
															   'where'  => "{$_col}={$type_id}" )	);
			
			$member_id = $content_author['id'];
		}
		
		if( ! ipsRegistry::$settings['reputation_can_self_vote'] && $member_id == $this->memberData['member_id'] )
		{
			$this->error_message = $this->lang->words['reputation_yourown'];
			return false;
		}
		
		/* Query the member group */
		if( ipsRegistry::$settings['reputation_protected_groups'] )
		{
			$member_group = $this->DB->buildAndFetch( array( 'select' => 'member_group_id', 'from' => 'members', 'where' => "member_id={$member_id}" ) );
			
			if( in_array( $member_group['member_group_id'], explode( ',', ipsRegistry::$settings['reputation_protected_groups'] ) ) )
			{
				$this->error_message = $this->lang->words['reputation_protected'];
				return false;			
			}
		}
		
		/* Build the insert array */
		$db_insert = array( 'member_id'  => $this->memberData['member_id'],
							'app'        => $app,
							'type'       => $type,
							'type_id'    => $type_id,
							'rep_date'   => time(),
							'rep_msg'    => $message,
							'rep_rating' => $rating );								
		
		/* Insert */
		if ( $currentRating )
		{
			if ( $rating == -1 && $this->isLikeMode() )
			{
			    $r = $this->DB->buildAndFetch(
			                                  array
			                                  (
			                                     'select'        => 'id',
			                                     'from'          => 'reputation_index',
			                                     'where'         => "app='{$app}' AND type='{$type}' AND type_id={$type_id} AND member_id=".$this->memberData['member_id'],
   			                                  )
			                     );
			                     
				$this->DB->delete( 'reputation_index', "app='{$app}' AND type='{$type}' AND type_id={$type_id} AND member_id=".$this->memberData['member_id'] );
				
                /** 
                 * Data contiene los datos que borraremos en la base de datos de bitÃ¡cora
                 * El ID de la tabla de configuraciÃ³n estarÃ¡ dado por la Clave STATUS_LIKEIT
                **/
                $pformat_data = array
                                (
                                      'configuration_id'       =>    STATUS_LIKEIT,
                                      'parent_id'              =>    intval( $r[ 'id' ] ),
                                );
                                
                //Configuramos los datos y eliminamos
                $this->registry->publish->setDataPublish( $pformat_data )->do_delete();
			}
		}
		else
		{
			$this->DB->replace( 'reputation_index', $db_insert, array( 'app', 'type', 'type_id', 'member_id' ) );
			
            /** 
             * Data contiene los datos que insertaremos en la base de datos de bitÃ¡cora
             * El ID de la tabla de configuraciÃ³n estarÃ¡ dado por la Clave STATUS_LIKEIT
            **/
            $pformat_data = array
                            (
                                  'configuration_id'       =>    STATUS_LIKEIT,
                                  'parent_id'              =>    $this->DB->getInsertId(),
                            );
                            
            //Configuramos los datos e insertamos
            $this->registry->publish->setDataPublish( $pformat_data )->do_insert();
		}
		
		/* Update cache */
		$this->updateCache( $app, $type, $type_id );

		/* Get authors current rep */
		$author_points = $this->DB->buildAndFetch( array( 'select' => 'pp_reputation_points', 
														  'from'   => 'profile_portal',
														  'where'  => "pp_member_id={$member_id}" )	 );
		
		/* Figure out new rep */
		if( $currentRating['rep_rating'] == -1 )
		{
			$author_points['pp_reputation_points'] += 1;
		}
		else if ( $currentRating['rep_rating'] == 1 )
		{
			$author_points['pp_reputation_points'] -= 1;
		}
		
		/* now add on new rating if we're not like mode-ing */
		if ( ( ! $this->isLikeMode() ) || ( empty( $currentRating['rep_rating'] ) && $this->isLikeMode() ) )
		{
			$author_points['pp_reputation_points'] += $rating;
		}

		$this->DB->update( 'profile_portal', array( 'pp_reputation_points' => $author_points['pp_reputation_points'] ), "pp_member_id={$member_id}" );
		
		/* Notification */
		if ( $rating == 1 && $this->isLikeMode() && $app == 'forums' && $type == 'pid' )
		{
			/* Check for class_forums */
			if ( ! $this->registry->isClassLoaded( 'class_forums' ) )
			{
				$classToLoad = IPSLib::loadLibrary( IPSLib::getAppDir( 'forums' ) . "/sources/classes/forums/class_forums.php", 'class_forums', 'forums' );
				$this->registry->setClass( 'class_forums', new $classToLoad( $this->registry ) );
				$this->registry->strip_invisible = 0;
				$this->registry->class_forums->forumsInit();
			}
		
			$classToLoad   = IPSLib::loadLibrary( IPS_ROOT_PATH . '/sources/classes/member/notifications.php', 'notifications' );
			$notifyLibrary = new $classToLoad( $this->registry );
			
			if ( ! $this->registry->isClassLoaded('topics') )
			{
				$classToLoad = IPSLib::loadLibrary( IPSLib::getAppDir( 'forums' ) . "/sources/classes/topics.php", 'app_forums_classes_topics', 'forums' );
				$this->registry->setClass( 'topics', new $classToLoad( $this->registry ) );
			}
			
			$post        = $this->registry->getClass('topics')->getPostById( $type_id );
			
			/* Set topic data */
			$this->registry->getClass('topics')->setTopicData( $post );
			
			/* Quick check */
			if ( ! $post['author_id'] OR $post['author_id'] == $this->memberData['member_id'] )
			{
				return true;
			}
			
			$_toMember	 = IPSMember::load( $post['author_id'] );
			
			/* Set language */
			$_toMember['language'] = $_toMember['language'] == "" ? IPSLib::getDefaultLanguage() : $_toMember['language'];
			
			/* Quick permission check */
			if ( $this->registry->getClass('topics')->canView() !== true )
			{
				return true;
			}
			
			$url = $this->registry->output->buildSEOUrl( "showtopic={$post['topic_id']}&amp;view=findpost&amp;p={$post['pid']}", "publicNoSession", $post['title_seo'], 'showtopic' );
			
			IPSText::getTextClass('email')->getTemplate( "new_likes", $_toMember['language'] );
		
			IPSText::getTextClass('email')->buildMessage( array('MEMBER_NAME'	=> $this->memberData['members_display_name'],
																'SHORT_POST'	=> IPSText::truncate( IPSText::getTextClass( 'bbcode' )->stripAllTags( $post['post'] ), 300 ),
																'URL'		    => $url ) );
	
			IPSText::getTextClass('email')->subject	= sprintf(  IPSText::getTextClass('email')->subject, 
																$this->registry->output->buildSEOUrl( 'showuser=' . $this->memberData['member_id'], 'publicNoSession', $this->memberData['members_seo_name'], 'showuser' ), 
																$this->memberData['members_display_name'],
																$url,
																$this->registry->output->buildSEOUrl( "showtopic={$post['topic_id']}", "publicNoSession", $post['title_seo'], 'showtopic' ),
																IPSText::truncate( $post['topic_title'], 30 ) );
	
			$notifyLibrary->setMember( $_toMember );
			$notifyLibrary->setFrom( $this->memberData );
			$notifyLibrary->setNotificationKey( 'new_likes' );
			$notifyLibrary->setNotificationUrl( $url );
			$notifyLibrary->setNotificationText( IPSText::getTextClass('email')->message );
			$notifyLibrary->setNotificationTitle( IPSText::getTextClass('email')->subject );
			
			try
			{
				$notifyLibrary->sendNotification();
			}
			catch( Exception $e ){}
		}
		
		return true;		
	}
}]]></hooks_source>
    </file>
  </hookfiles>
  <hookextras_settings/>
  <hookextras_language>
    <language>
      <word_app>core</word_app>
      <word_pack>public_global</word_pack>
      <word_key>poststatus_submit</word_key>
      <word_default>Publicar</word_default>
    </language>
    <language>
      <word_app>core</word_app>
      <word_pack>public_global</word_pack>
      <word_key>poststatus_attachment</word_key>
      <word_default>Adjuntar</word_default>
    </language>
  </hookextras_language>
  <hookextras_modules/>
  <hookextras_help/>
  <hookextras_templates>
    <templates>
      <template_group>skin_portal</template_group>
      <template_content><![CDATA[<if test="loadPluginPostStatus:|:$active">
<!-- Load Plugin Post Status -->
<!-- End Load Plugin Post Status -->
</if>]]></template_content>
      <template_name>pluginPostStatus</template_name>
      <template_data>$active = false</template_data>
      <template_updated>1342538423</template_updated>
      <template_removable>0</template_removable>
      <template_added_to>0</template_added_to>
      <template_user_added>0</template_user_added>
      <template_user_edited>0</template_user_edited>
      <template_master_key>root</template_master_key>
    </templates>
    <templates>
      <template_group>skin_portal</template_group>
      <template_content><![CDATA[<!--no data in this master skin-->]]></template_content>
      <template_name>pluginPostStatus</template_name>
      <template_data>$active = false</template_data>
      <template_updated>1342538423</template_updated>
      <template_removable>0</template_removable>
      <template_added_to>0</template_added_to>
      <template_user_added>0</template_user_added>
      <template_user_edited>0</template_user_edited>
      <template_master_key>xmlskin</template_master_key>
    </templates>
    <templates>
      <template_group>skin_portal</template_group>
      <template_content><![CDATA[<!--no data in this master skin-->]]></template_content>
      <template_name>pluginPostStatus</template_name>
      <template_data>$active = false</template_data>
      <template_updated>1342538424</template_updated>
      <template_removable>0</template_removable>
      <template_added_to>0</template_added_to>
      <template_user_added>0</template_user_added>
      <template_user_edited>0</template_user_edited>
      <template_master_key>mobile</template_master_key>
    </templates>
    <templates>
      <template_group>skin_portal</template_group>
      <template_content><![CDATA[<div class='poststatusShow ipsBox'>
	<form id='statusPostForm' action="{parse url="app=portal&amp;module=portal&amp;section=status&amp;do=new&amp;k={$this->member->form_hash}&amp;id={$this->memberData['member_id']}" base="public"}" method='post'>
		<div class='wdthink-attach ipsList_data'>
			<div class='wdthink row_data mentions-input-box'>
			   <textarea class='mention textParseUrl' name='content' id='statusContent'></textarea>
			</div>
			<div class='attach row_data'>
				<input type='button' id='attach' value='{$this->lang->words['poststatus_attachment']}' />
			</div>
		</div>
		<div class='publish'>
			<input type='submit' value='{$this->lang->words['poststatus_submit']}' />
		</div>
	</form>
</div>
<div id='status_standalone_page'>
	<div id="status_wrapper" class='ipsBox'>
		{$statuses_output}
	</div>
	<div class='topic_controls clearfix'>
		{$pages}
	</div>
</div>]]></template_content>
      <template_name>poststatusShow</template_name>
      <template_data>$statuses_output</template_data>
      <template_updated>1342538423</template_updated>
      <template_removable>0</template_removable>
      <template_added_to>0</template_added_to>
      <template_user_added>0</template_user_added>
      <template_user_edited>0</template_user_edited>
      <template_master_key>root</template_master_key>
    </templates>
    <templates>
      <template_group>skin_portal</template_group>
      <template_content><![CDATA[<!--no data in this master skin-->]]></template_content>
      <template_name>poststatusShow</template_name>
      <template_data>$statuses_output</template_data>
      <template_updated>1342538423</template_updated>
      <template_removable>0</template_removable>
      <template_added_to>0</template_added_to>
      <template_user_added>0</template_user_added>
      <template_user_edited>0</template_user_edited>
      <template_master_key>xmlskin</template_master_key>
    </templates>
    <templates>
      <template_group>skin_portal</template_group>
      <template_content><![CDATA[<!--no data in this master skin-->]]></template_content>
      <template_name>poststatusShow</template_name>
      <template_data>$statuses_output</template_data>
      <template_updated>1342538424</template_updated>
      <template_removable>0</template_removable>
      <template_added_to>0</template_added_to>
      <template_user_added>0</template_user_added>
      <template_user_edited>0</template_user_edited>
      <template_master_key>mobile</template_master_key>
    </templates>
    <templates>
      <template_group>skin_portal</template_group>
      <template_content><![CDATA[<div class='ipsBox_container ipsPad' id='statusWrap-{$status['id']}'>
	<a href='{parse url="showuser={$status['member_id']}" seotitle="{$status['members_seo_name']}" template="showuser" base="public"}' title='{$this->lang->words['view_profile']}' class='ipsUserPhotoLink left'>
		<img src='{$status['pp_small_photo']}' alt="{parse expression="sprintf($this->lang->words['users_photo'],$status['members_display_name'])"}" class='ipsUserPhoto ipsUserPhoto_medium' />
	</a>
	<div class="ipsBox_withphoto status_content">
		<div id="statusContent-{$status['id']}">
			<h4>
				{parse template="userHoverCard" group="global" params="$status"}
				<if test="forSomeoneElse:|:$status['status_member_id'] != $status['status_author_id']">
					&rarr;
					{parse template="userHoverCard" group="global" params="$status['owner']"}
				</if>
			</h4>
			<div class='status_status'>
				Aquí va una fotografía de nombre: {$status[ 'caption' ]}
			</div>
			<span class='desc lighter blend_links'>
				<img src="{$this->settings['img_url']}/icon_lock.png" id='statusLockImg-{$status['status_id']}' alt="{$this->lang->words['status__locked']}" <if test="noLocked:|:!$status['status_is_locked']">style='display: none'</if> />
				<if test="cImg:|:! $smallSpace AND $status['_creatorImg']"><img src="{$status['_creatorImg']}" alt='' /></if>
				<a href='{parse url="app=members&amp;module=profile&amp;section=status&amp;type=single&amp;status_id={$status['status_id']}" seotitle="true" template="members_status_single" base="public"}'>{$status['status_date_formatted_short']}</a><if test="creatorText:|:$smallSpace AND $status['_creatorText'] AND $status['status_creator'] AND $status['status_creator'] != 'ipb'"> {$this->lang->words['su_via']} {$status['_creatorText']}</if>
			</span>
			<span class='mod_links'>
				<if test="canDelete:|:$status['_canDelete']"> &middot; <a rel="nofollow" href="{$this->settings['base_url']}app=members&amp;module=profile&amp;section=status&amp;do=deleteStatus&amp;status_id={$status['status_id']}&amp;k={$this->member->form_hash}" id="statusDelete-{$status['status_id']}" class="__sD __d{$status['status_id']}">{$this->lang->words['status_delete_link']}</a></if>
				<span id='statusUnlock-{$status['status_id']}' <if test="isLocked:|:$status['_isLocked'] AND $status['_canUnlock']">style='display:inline'<else />style='display:none'</if>> &middot; <a rel="nofollow"  href="{$this->settings['base_url']}app=members&amp;module=profile&amp;section=status&amp;do=unlockStatus&amp;status_id={$status['status_id']}&amp;k={$this->member->form_hash}" id="statusUnlockLink-{$status['status_id']}" class="__sU __u{$status['status_id']}">{$this->lang->words['status_unlock_link']}</a></span>
				<span id='statusLock-{$status['status_id']}' <if test="canLock:|:$status['_canLock'] AND ! $status['_isLocked']">style='display:inline'<else />style='display:none'</if>> &middot; <a rel="nofollow"  href="{$this->settings['base_url']}app=members&amp;module=profile&amp;section=status&amp;do=lockStatus&amp;status_id={$status['status_id']}&amp;k={$this->member->form_hash}" id="statusLockLink-{$status['status_id']}" class="__sL __l{$status['status_id']}">{$this->lang->words['status_lock_link']}</a></span>
			</span>
		</div>
     </div>
		<div id="statusFeedback-{$status['status_id']}" class='status_feedback'>
			<if test="$status['status_replies']">
				<if test="hasMore:|:$status['status_replies'] > 3">
					<div class='status_mini_wrap row2 altrow' id='statusMoreWrap-{$status['status_id']}'>
						<img src="{$this->settings['img_url']}/comments.png" alt="" /> &nbsp;<a href="#" id="statusMore-{$status['status_id']}" class='__showAll __x{$status['status_id']}'>{parse expression="sprintf( $this->lang->words['status_show_all_x'], $status['status_replies'] )"}</a>
					</div>
				</if>
				<ul id='statusReplies-{$status['id']}' class='ipsList_withtinyphoto clear'>
					{$status['status_replies']}
				</ul>
			</if>
			<div id='statusReplyBlank-{$status['id']}'></div>
			<div id='statusReply-{$status['id']}'>
			<if test="$status['_userCanReply']">
				<ul class='ipsList_withtinyphoto reply row2 ipsPad'>
					<li>
						<form id='statusReplyForm-{$status['status_id']}' action='{$this->settings['base_url']}app=members&amp;module=profile&amp;section=status&amp;do=reply&amp;status_id={$status['status_id']}&amp;k={$this->member->form_hash}&amp;id={$this->memberData['member_id']}' method='post'>
							<a href='{parse url="showuser={$this->memberData['member_id']}" seotitle="{$this->memberData['members_seo_name']}" template="showuser" base="public"}' title='{$this->lang->words['view_profile']}' class='ipsUserPhotoLink left'><img src='{$this->memberData['pp_mini_photo']}' alt="{parse expression="sprintf($this->lang->words['users_photo'],$this->memberData['members_display_name'])"}" class='ipsUserPhoto ipsUserPhoto_tiny' /></a>
							<div class='list_content'>
								<div class="status_mini_content">
									<textarea class='status_textarea input_text' rows='3' cols='50' name='comment-{$status['status_id']}' id='statusText-{$status['status_id']}'></textarea>
									<div class="status_submit"><input type='submit' class='__submit input_submit' id='statusSubmit-{$status['status_id']}' value='{$this->lang->words['status__dfcomment']}' /></div>
								</div>									
							</div>
						</form>
						<a href='#' class='__showform' id='statusReplyFormShow-{$status['status_id']}' style='display: none'>{$this->lang->words['status__addcomment']}</a>
					</li>
				</ul>
				<script type='text/javascript'>
					if( $('statusReplyForm-{$status['status_id']}') )
					{
						$('statusReplyForm-{$status['status_id']}').hide();
					}
					
					if( $('statusReplyFormShow-{$status['status_id']}') )
					{
						$('statusReplyFormShow-{$status['status_id']}').show();
					}
				</script>
			</if>
			</div>
			<div class='status_mini_wrap row2 altrow' id='statusMaxWrap-{$status['status_id']}' <if test="maxReplies:|:$status['status_replies'] < $this->settings['su_max_replies']">style='display:none'</if>>
				<img src="{$this->settings['img_url']}/locked_replies.png" title="{$this->lang->words['status_too_many_replies']}" alt='x' /> {$this->lang->words['status_too_many_replies']}
			</div>
		</div>
</div>]]></template_content>
      <template_name>showPhoto</template_name>
      <template_data>$status=array(), $smallSpace=0, $latestOnly=0</template_data>
      <template_updated>1342538423</template_updated>
      <template_removable>0</template_removable>
      <template_added_to>0</template_added_to>
      <template_user_added>0</template_user_added>
      <template_user_edited>0</template_user_edited>
      <template_master_key>root</template_master_key>
    </templates>
    <templates>
      <template_group>skin_portal</template_group>
      <template_content><![CDATA[<div id='status_standalone_page'>
	<div id="status_wrapper" class='ipsBox'>
		<if test="hasUpdates:|:count( $publish )">
			{parse template="statusUpdates" group="portal" params="$publish"}
		<else />
			<p class='no-status'>{$this->lang->words['status_updates_none']}</p>
		</if>
	</div>
	<div class='topic_controls clearfix'>
		{$pages}
	</div>
</div>]]></template_content>
      <template_name>showStatus</template_name>
      <template_data>$publish</template_data>
      <template_updated>1342538423</template_updated>
      <template_removable>0</template_removable>
      <template_added_to>0</template_added_to>
      <template_user_added>0</template_user_added>
      <template_user_edited>0</template_user_edited>
      <template_master_key>root</template_master_key>
    </templates>
    <templates>
      <template_group>skin_portal</template_group>
      <template_content><![CDATA[<!--no data in this master skin-->]]></template_content>
      <template_name>showStatus</template_name>
      <template_data>$publish</template_data>
      <template_updated>1342538423</template_updated>
      <template_removable>0</template_removable>
      <template_added_to>0</template_added_to>
      <template_user_added>0</template_user_added>
      <template_user_edited>0</template_user_edited>
      <template_master_key>xmlskin</template_master_key>
    </templates>
    <templates>
      <template_group>skin_portal</template_group>
      <template_content><![CDATA[<!--no data in this master skin-->]]></template_content>
      <template_name>showStatus</template_name>
      <template_data>$publish</template_data>
      <template_updated>1342538424</template_updated>
      <template_removable>0</template_removable>
      <template_added_to>0</template_added_to>
      <template_user_added>0</template_user_added>
      <template_user_edited>0</template_user_edited>
      <template_master_key>mobile</template_master_key>
    </templates>
    <templates>
      <template_group>skin_portal</template_group>
      <template_content><![CDATA[<if test="$this->memberData['member_id'] AND $latestOnly AND $status['member_id'] == $this->memberData['member_id']">
<script type="text/javascript">
	ipb.status.myLatest = {$status['id']};
</script>
</if>
<div class='ipsBox_container ipsPad' id='statusWrap-{$status['id']}'>
	<a href='{parse url="showuser={$status['member_id']}" seotitle="{$status['members_seo_name']}" template="showuser" base="public"}' title='{$this->lang->words['view_profile']}' class='ipsUserPhotoLink left'>
		<img src='{$status['pp_small_photo']}' alt="{parse expression="sprintf($this->lang->words['users_photo'],$status['members_display_name'])"}" class='ipsUserPhoto ipsUserPhoto_medium' />
	</a>	
	<div class="ipsBox_withphoto status_content">
		<div id="statusContent-{$status['id']}">
			<h4>
				{parse template="userHoverCard" group="global" params="$status"}
				<if test="forSomeoneElse:|:$status['status_member_id'] != $status['status_author_id']">
					&rarr;
					{parse template="userHoverCard" group="global" params="$status['owner']"}
				</if>
			</h4>
			<div class='status_status'>
				{$status['status_content']}
			</div>
			<span class='desc lighter blend_links'>
				<img src="{$this->settings['img_url']}/icon_lock.png" id='statusLockImg-{$status['status_id']}' alt="{$this->lang->words['status__locked']}" <if test="noLocked:|:!$status['status_is_locked']">style='display: none'</if> />
				<if test="cImg:|:! $smallSpace AND $status['_creatorImg']"><img src="{$status['_creatorImg']}" alt='' /></if>
				<a href='{parse url="app=members&amp;module=profile&amp;section=status&amp;type=single&amp;status_id={$status['status_id']}" seotitle="true" template="members_status_single" base="public"}'>{$status['status_date_formatted_short']}</a><if test="creatorText:|:$smallSpace AND $status['_creatorText'] AND $status['status_creator'] AND $status['status_creator'] != 'ipb'"> {$this->lang->words['su_via']} {$status['_creatorText']}</if>
			</span>
			<span class='mod_links'>
				<if test="canDelete:|:$status['_canDelete']"> &middot; <a rel="nofollow" href="{$this->settings['base_url']}app=members&amp;module=profile&amp;section=status&amp;do=deleteStatus&amp;status_id={$status['status_id']}&amp;k={$this->member->form_hash}" id="statusDelete-{$status['status_id']}" class="__sD __d{$status['status_id']}">{$this->lang->words['status_delete_link']}</a></if>
				<span id='statusUnlock-{$status['status_id']}' <if test="isLocked:|:$status['_isLocked'] AND $status['_canUnlock']">style='display:inline'<else />style='display:none'</if>> &middot; <a rel="nofollow"  href="{$this->settings['base_url']}app=members&amp;module=profile&amp;section=status&amp;do=unlockStatus&amp;status_id={$status['status_id']}&amp;k={$this->member->form_hash}" id="statusUnlockLink-{$status['status_id']}" class="__sU __u{$status['status_id']}">{$this->lang->words['status_unlock_link']}</a></span>
				<span id='statusLock-{$status['status_id']}' <if test="canLock:|:$status['_canLock'] AND ! $status['_isLocked']">style='display:inline'<else />style='display:none'</if>> &middot; <a rel="nofollow"  href="{$this->settings['base_url']}app=members&amp;module=profile&amp;section=status&amp;do=lockStatus&amp;status_id={$status['status_id']}&amp;k={$this->member->form_hash}" id="statusLockLink-{$status['status_id']}" class="__sL __l{$status['status_id']}">{$this->lang->words['status_lock_link']}</a></span>
			</span>
		</div>
		<div id="statusFeedback-{$status['status_id']}" class='status_feedback' style='margin-left: -65px;'>
			<if test="$status['status_replies']">
				<if test="hasMore:|:$status['status_replies'] > 3">
					<div class='status_mini_wrap row2 altrow' id='statusMoreWrap-{$status['status_id']}'>
						<img src="{$this->settings['img_url']}/comments.png" alt="" /> &nbsp;<a href="#" id="statusMore-{$status['status_id']}" class='__showAll __x{$status['status_id']}'>{parse expression="sprintf( $this->lang->words['status_show_all_x'], $status['status_replies'] )"}</a>
					</div>
				</if>
				<ul id='statusReplies-{$status['id']}' class='ipsList_withtinyphoto clear'>
					{$status['status_replies']}
				</ul>
			</if>
			<div id='statusReplyBlank-{$status['id']}'></div>
			<div id='statusReply-{$status['id']}'>
			<if test="$status['_userCanReply']">
				<ul class='ipsList_withtinyphoto reply row2 ipsPad'>
					<li>
						<form id='statusReplyForm-{$status['status_id']}' action='{$this->settings['base_url']}app=members&amp;module=profile&amp;section=status&amp;do=reply&amp;status_id={$status['status_id']}&amp;k={$this->member->form_hash}&amp;id={$this->memberData['member_id']}' method='post'>
							<a href='{parse url="showuser={$this->memberData['member_id']}" seotitle="{$this->memberData['members_seo_name']}" template="showuser" base="public"}' title='{$this->lang->words['view_profile']}' class='ipsUserPhotoLink left'><img src='{$this->memberData['pp_mini_photo']}' alt="{parse expression="sprintf($this->lang->words['users_photo'],$this->memberData['members_display_name'])"}" class='ipsUserPhoto ipsUserPhoto_tiny' /></a>
							<div class='list_content'>
								<div class="status_mini_content">
									<textarea class='status_textarea input_text' rows='3' cols='50' name='comment-{$status['status_id']}' id='statusText-{$status['status_id']}'></textarea>
									<div class="status_submit"><input type='submit' class='__submit input_submit' id='statusSubmit-{$status['status_id']}' value='{$this->lang->words['status__dfcomment']}' /></div>
								</div>									
							</div>
						</form>
						<a href='#' class='__showform' id='statusReplyFormShow-{$status['status_id']}' style='display: none'>{$this->lang->words['status__addcomment']}</a>
					</li>
				</ul>
				<script type='text/javascript'>
					if( $('statusReplyForm-{$status['status_id']}') )
					{
						$('statusReplyForm-{$status['status_id']}').hide();
					}
					
					if( $('statusReplyFormShow-{$status['status_id']}') )
					{
						$('statusReplyFormShow-{$status['status_id']}').show();
					}
				</script>
			</if>
			</div>
			<div class='status_mini_wrap row2 altrow' id='statusMaxWrap-{$status['status_id']}' <if test="maxReplies:|:$status['status_replies'] < $this->settings['su_max_replies']">style='display:none'</if>>
				<img src="{$this->settings['img_url']}/locked_replies.png" title="{$this->lang->words['status_too_many_replies']}" alt='x' /> {$this->lang->words['status_too_many_replies']}
			</div>
		</div>
	</div>
</div>]]></template_content>
      <template_name>statusUpdates</template_name>
      <template_data>$status=array(), $smallSpace=0, $latestOnly=0</template_data>
      <template_updated>1342538423</template_updated>
      <template_removable>0</template_removable>
      <template_added_to>0</template_added_to>
      <template_user_added>0</template_user_added>
      <template_user_edited>0</template_user_edited>
      <template_master_key>root</template_master_key>
    </templates>
    <templates>
      <template_group>skin_portal</template_group>
      <template_content><![CDATA[<!--no data in this master skin-->]]></template_content>
      <template_name>statusUpdates</template_name>
      <template_data>$updates=array(), $smallSpace=0, $latestOnly=0</template_data>
      <template_updated>1342538423</template_updated>
      <template_removable>0</template_removable>
      <template_added_to>0</template_added_to>
      <template_user_added>0</template_user_added>
      <template_user_edited>0</template_user_edited>
      <template_master_key>xmlskin</template_master_key>
    </templates>
    <templates>
      <template_group>skin_portal</template_group>
      <template_content><![CDATA[<!--no data in this master skin-->]]></template_content>
      <template_name>statusUpdates</template_name>
      <template_data>$updates=array(), $smallSpace=0, $latestOnly=0</template_data>
      <template_updated>1342538424</template_updated>
      <template_removable>0</template_removable>
      <template_added_to>0</template_added_to>
      <template_user_added>0</template_user_added>
      <template_user_edited>0</template_user_edited>
      <template_master_key>mobile</template_master_key>
    </templates>
  </hookextras_templates>
  <hookextras_css/>
  <hookextras_replacements/>
  <hookextras_tasks>
    <tasks>
      <task_title>Friends</task_title>
      <task_file>friends.php</task_file>
      <task_week_day>-1</task_week_day>
      <task_month_day>-1</task_month_day>
      <task_hour>-1</task_hour>
      <task_minute>1</task_minute>
      <task_cronkey>d159e7de09fccd458a00ab546ce8b203</task_cronkey>
      <task_log>0</task_log>
      <task_description>Friends cache member</task_description>
      <task_enabled>0</task_enabled>
      <task_key>friends</task_key>
      <task_safemode>0</task_safemode>
      <task_locked>0</task_locked>
      <task_application>portal</task_application>
    </tasks>
  </hookextras_tasks>
  <hookextras_database_create/>
  <hookextras_database_alter/>
  <hookextras_database_update/>
  <hookextras_database_insert/>
</hookexport>
